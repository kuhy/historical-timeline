#+TITLE: Historical Timeline
/The web application allows to create timelines of historical events that
teachers can show to students to better learn history./

The main functionality for teachers is to add new historical events
(e.g. Austerlitz battle, Dec 2, 1805). Each event is represented by a date, a
location, a description and an image/placeholder. Teachers can create several
timelines and add events to them. All events on a timeline will be shown
graphically ordered in time (no need of something complex, also some simple HTML
will do it). Teachers can create some study groups (e.g. Roman Empire, Second
World War, etc...) and enroll students. Teachers can add one or more timelines
to each group. Students can login to the system and take part to some groups
created by teachers. They will be able to see all the timelines for the specific
group and add a comment to them. Searching among all events is also possible.
* How to build it
  Use the Maven wrapper to build the project:
  #+BEGIN_SRC sh
  ./mvnw clean install
  #+END_SRC
* What needs to be done
** Tasks
   - create a separate branch for every task
     - use =git checkout -b name-of-my-branch develop=
     - use following prefix for branch name: =feature-=
   - commit all of your work to this branch
     - capitalize the subject line of the commit message
     - use the imperative mood in the subject line
   - do not write boilerplate code; use Lombok!
   - check if the program can be build using =./mvnw clean install=
     - this will also run tests
   - check if every class that you created has =javadoc= with =@author= tag
   - check if every public field and method that you created has =javadoc=
     - except simple getters and setters
     - except methods that you =@Override=
   - crosscheck all project requirements
   - create a PR from your branch to the branch called =develop=
   - assign PR to the subsequent team member (based on the following table)
** Code review
   - every team member is responsible to do code review for the PRs that he is assigned to
   - also crosscheck everything that was mentioned above
   - when everything is ok, merge the branch
** Milestones
   - when the milestone will be completed, we will merge =develop= to the =master=
*** TODO Milestone 2
    DEADLINE: <2021-04-30 Fri>
    - change the layout of your project to a Multimodule Maven project (tutorial here http://maven.apache.org/guides/getting-started/index.html) Your project should have 3 separate modules:
      - DAO layer
      - Service Layer and Facade Layer implementation
      - API layer - just DTOs and facade interfaces!
    - there must be extensive unit tests for the service layer (particularly for your two business functions) and all the tests of the service layer must use Mock DAO objects;
    - *Stefan's task is to refactor User (entity, DAO, test) and rewrite javadoc.*
    - first task is to implement services (and create interfaces for them):
      - crosscheck each service with use-case diagram, DAO and facade API
      - make sure that =DataAccessException= or its subclass is thrown in case of any exception on the DAO layer
      - you must have at least two non-trivial business functions on Service Layer (the example project contains several of them). Service layer is not always just a place to delegate to DAOs.
      - check [[https://www.javaguides.net/2018/07/handle-nullpointerexception-in-controller-service-and-dao-layer-using-java-8-optional-class.html][this tutorial on use of Optionals inside the service layer]]
      | Task          | Deadline | =User= | =StudyGroup= | =HistoricalTimeline= | =TimelineComment= | =HistoricalEvent= |
      | *Service*     | 23. 4.   | Stefan | Matej        | Kuhy                 | Kuhy              | Kája              |
      | *Code review* | 23. 4.   | Kája   | Kuhy         | Stefan               | Matej             | Matej             |
      - *we will have a call on 19. 4. and we will reflect on our work*
    - second task is to implement facades and DTOs
      - the Facade layer will use the Service layer and the Service layer will use the DAO layer;
      - implement simple unit tests for the facade layer. Just one simple test per method is enough. This is mainly so that it’s easy to verify the Facade layer;
      - implement the Facade layer interfaces and implementations.
      - everything that should happen in the system must be available through these interfaces (creating entities, deleting them etc);
      - other points about the Facade and Service layers:
        - all the classes must be wired via dependency injection. Your service objects should obtain an instance of the EntityManager that way;
        - all the facade interfaces must not reference entities, but Transfer Objects only;
        - all service interfaces must reference only entities, not Data Transfer Objects;
        - you can use the Dozer framework (or similar) to map entity instances to transfer objects. The mapping may be done on Facade Layer;
        - the Facade layer is used to drive transactions;
      | Task           | Deadline | =User= | =StudyGroup= | =HistoricalTimeline= | Milestone1 comments |
      | *Facade + DTO* | 25. 4.   | Kája   | Stefan       | Matej                | Kuhy                |
*** DONE Milestone 1
    DEADLINE: <2021-04-07 Wed>
    - *create a project wiki with a project description*
    - create 4 entity classes for your project if you are a team of four (rule: one entity for each team member).
    - *implement properly equals and hash code for these entities*
    - create a DAO layer interface (with proper Javadoc).
    - create the JPA implementation of the DAO classes (CRUD operations are enough for the first milestone).
    - create tests for the DAO classes (you can use an in-memory database).
    - *we will have a call on 6. 4. and we will reflect on our work*
    | Task          | Deadline | =Student= | =StudyGroup= | =HistoricalTimeline= | =TimelineComment= | =Teacher= | =HistoricalEvent= |
    |---------------+----------+-----------+--------------+----------------------+-------------------+-----------+-------------------|
    | *Class*       | 2. 4.    | Stefan    | Stefan       | Kuhy                 | Kuhy              | Kája      | Matej             |
    | *DAO*         | 4. 4.    | Matej     | Matej        | Stefan               | Stefan            | Kuhy      | Kája              |
    | *Tests*       | 6. 4.    | Kája      | Kája         | Matej                | Matej             | Stefan    | Kuhy              |
    | *Check tests* | 6. 4.    | Kuhy      | Kuhy         | Kája                 | Kája              | Matej     | Stefan            |
* Use-case diagram
  #+BEGIN_SRC plantuml :file images/use-case_diagram.svg :exports results
    left to right direction

    actor User
    actor Student
    actor Teacher

    User <|-- Student
    User <|-- Teacher

    User --> (login)
    User --> (logout)
    User --> (register)
    User --> (view timeline)
    User --> (view study group)

    Student --> (add comment to timeline)
    Student --> (search among all events)

    Teacher --> (create event)
    Teacher --> (create timeline)
    Teacher --> (create study group)
    Teacher --> (add event to timeline)
    Teacher --> (add timeline to study group)
    Teacher --> (enroll student to study group)
  #+END_SRC

  #+RESULTS:
  [[file:images/use-case_diagram.svg]]
* Class diagram
  #+BEGIN_SRC plantuml :file images/class_diagram.svg :exports results
    class HistoricalEvent {
      name: String
      description: String
      date: LocalDate
      location: String
      image: byte[]
    }

    class HistoricalTimeline {
      name: String
    }

    HistoricalTimeline "1" *-- "*" HistoricalEvent

    class StudyGroup {
      name: String
    }

    StudyGroup "1" *-- "*" HistoricalTimeline

    class Teacher {
      firstName: String
      lastName: String
      username: String
      hashedPassword: int
    }

    Teacher "1" *-- "*" StudyGroup


    class Student {
      firstName: String
      lastName: String
      username: String
      hashedPassword: int
    }

    Student "*" o--o "*" StudyGroup

    class TimelineComment {
      text: String
    }

    HistoricalTimeline "1" *-- "*" TimelineComment
    TimelineComment "*" o-- "1" Student
  #+END_SRC

  #+RESULTS:
  [[file:images/class_diagram.svg]]
